---
- name: Check if Terraform role exists
  ansible.builtin.command: pveum role list
  register: roles_output
  changed_when: false

- name: Set fact if Terraform role does not exist
  ansible.builtin.set_fact:
    terraform_role_missing: "{{ 'Terraform' not in roles_output.stdout }}"
  changed_when: false

- name: Create Terraform role if it does not exist
  ansible.builtin.command: >
    pveum role add Terraform -privs "Datastore.AllocateSpace Datastore.Audit
    Pool.Allocate Sys.Audit Sys.Console Sys.Modify VM.Allocate VM.Audit VM.Clone
    VM.Config.CDROM VM.Config.Cloudinit VM.Config.CPU VM.Config.Disk VM.Config.HWType
    VM.Config.Memory VM.Config.Network VM.Config.Options VM.Migrate VM.Monitor VM.PowerMgmt SDN.Use"
  when: terraform_role_missing
  changed_when: true

- name: Check if user exists
  ansible.builtin.command: pveum user list
  register: users_output
  changed_when: false

- name: Set fact if user does not exist
  ansible.builtin.set_fact:
    user_missing: "{{ vault_proxmox_terraform_user not in users_output.stdout }}"
  changed_when: false

- name: Create user if it does not exist
  ansible.builtin.command: pveum user add {{ vault_proxmox_terraform_user }} --password "{{ vault_proxmox_terraform_password }}"
  when: user_missing
  changed_when: true

- name: Check if user has Terraform role
  ansible.builtin.command: pveum acl list
  register: acl_output
  changed_when: false

- name: Set fact if user does not have Terraform role
  ansible.builtin.set_fact:
    user_missing_role: "{{ vault_proxmox_terraform_user not in acl_output.stdout }}"
  changed_when: false

- name: Assign Terraform role to user
  ansible.builtin.command: pveum aclmod / -user {{ vault_proxmox_terraform_user }} -role Terraform
  when: user_missing_role
  changed_when: true
